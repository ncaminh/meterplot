#!/usr/bin/env python
import matplotlib.pyplot as plt
from matplotlib import style
from datetime import datetime
import yaml

# style.use('ggplot')


def read_data(filename):
    stream = open(filename, 'r')
    docs = yaml.load_all(stream)
    dates = []
    values = []
    for doc in docs:
        for d in doc:
            dates.append(datetime.strptime(d['date'], '%Y-%m-%d %H:%M'))
            values.append(d['value'])

    # sort by date
    idx = sorted(range(len(dates)), key=lambda k: dates[k])
    dates = [dates[k] for k in idx]
    values = [values[k] for k in idx]

    return dates, values


def show_data(dates, values):
    # Get the average wattage between two datetimes. Since the values are in
    # kWh, divide by the number of hours.
    diff = [dates[k+1] - dates[k] for k in range(len(dates) - 1)]
    diff_in_hours = [d.days * 24 + d.seconds / 3600. for d in diff]

    wattages = [
        (values[k+1] - values[k]) / diff_in_hours[k] * 1000.
        for k in range(len(values) - 1)
        ]

    # scale
    kwh_per_year = [watt * 24 * 365 / 1000.0 for watt in wattages]

    # duplicate all interior values
    x = [dates[0]] + \
        [date for date in dates[1:-1] for _ in (0, 1)] + \
        [dates[-1]]
    #
    y = [val for val in kwh_per_year for _ in (0, 1)]

    plt.plot_date(x, y, marker='')

    ax1 = plt.gca()
    ax2 = ax1.twinx()

    ax1.set_title('Energy consumption')
    ytop = 1.1 * max(y)
    ax1.set_ylim(0, ytop)
    ax1.set_ylabel('kWh per year')

    ax2.set_ylim(0, ytop * 1000 / (24 * 365.))
    ax2.set_ylabel('W')

    # matplotlib2.0's default green
    ax1.fill_between(x, y, color='#2ca02c')

    return


def _parse_cmd_arguments():
    import argparse
    parser = argparse.ArgumentParser(
        description='Show energy consumption data'
        )
    parser.add_argument(
            'infile',
            type=str,
            help='input data YAML file'
            )
    return parser.parse_args()


if __name__ == '__main__':
    args = _parse_cmd_arguments()
    infile = args.infile

    dates, values = read_data(infile)
    show_data(dates, values)
    plt.show()
