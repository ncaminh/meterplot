#!/usr/bin/env python
import matplotlib.pyplot as plt
from matplotlib import style
from datetime import datetime
import yaml

# style.use('ggplot')


def read_data(filename):
    stream = open(filename, 'r')
    docs = yaml.load_all(stream)
    datetimes = []
    values = []
    for doc in docs:
        unit = doc['unit']
        datetimes = [
            datetime.strptime(d['date'], '%Y-%m-%d %H:%M')
            for d in doc['data']
            ]
        # sort
        idx = sorted(range(len(datetimes)), key=lambda k: datetimes[k])
        datetimes = [datetimes[k] for k in idx]

        tpe = doc['type']
        assert tpe in ['water', 'electricity']

        if tpe == 'water':
            values = {
                'warm': [doc['data'][k]['warm'] for k in idx],
                'cold': [doc['data'][k]['cold'] for k in idx],
                }
        else:  # type: electricity
            values = [doc['data'][k]['value'] for k in idx]

    return tpe, datetimes, values


def show_water_data(dates, values):
    diff = [dates[k+1] - dates[k] for k in range(len(dates) - 1)]
    diff_in_hours = [d.days * 24 + d.seconds / 3600. for d in diff]

    warm_m3_per_year = [
        (values['warm'][k+1] - values['warm'][k]) / diff_in_hours[k] * 24 * 365
        for k in range(len(values['warm']) - 1)
        ]
    cold_m3_per_year = [
        (values['cold'][k+1] - values['cold'][k]) / diff_in_hours[k] * 24 * 365
        for k in range(len(values['cold']) - 1)
        ]

    # duplicate all interior values
    x = [dates[0]] + \
        [date for date in dates[1:-1] for _ in (0, 1)] + \
        [dates[-1]]
    #
    y_warm = [val for val in warm_m3_per_year for _ in (0, 1)]
    y_cold = [val for val in cold_m3_per_year for _ in (0, 1)]

    plt.stackplot(x, (y_warm, y_cold), colors=('#d62728', '#1f77b4'))

    ax1 = plt.gca()

    ax1.set_title('Water consumption')
    ytop = 1.1 * max([s0 + s1 for s0, s1 in zip(y_warm, y_cold)])
    ax1.set_ylim(0, ytop)
    ax1.set_ylabel('m^3 per year')

    ax2 = ax1.twinx()
    ax2.set_ylim(0, ytop * 1000 / 365.)
    ax2.set_ylabel('liters per day')

    return


def show_electricity_data(dates, values):
    # Get the average wattage between two datetimes. Since the values are in
    # kWh, divide by the number of hours.
    diff = [dates[k+1] - dates[k] for k in range(len(dates) - 1)]
    diff_in_hours = [d.days * 24 + d.seconds / 3600. for d in diff]

    kwh_per_year = [
        (values[k+1] - values[k]) / diff_in_hours[k] * 24 * 365
        for k in range(len(values) - 1)
        ]

    # duplicate all interior values
    x = [dates[0]] + \
        [date for date in dates[1:-1] for _ in (0, 1)] + \
        [dates[-1]]
    #
    y = [val for val in kwh_per_year for _ in (0, 1)]

    plt.plot_date(x, y, marker='')

    ax1 = plt.gca()
    ax2 = ax1.twinx()

    ax1.set_title('Energy consumption')
    ytop = 1.1 * max(y)
    ax1.set_ylim(0, ytop)
    ax1.set_ylabel('kWh per year')

    ax2.set_ylim(0, ytop * 1000 / (24 * 365.))
    ax2.set_ylabel('W')

    # matplotlib2.0's default green
    ax1.fill_between(x, y, color='#2ca02c')

    return


def _parse_cmd_arguments():
    import argparse
    parser = argparse.ArgumentParser(
        description='Show energy consumption data'
        )
    parser.add_argument(
            'infile',
            type=str,
            help='input data YAML file'
            )
    return parser.parse_args()


if __name__ == '__main__':
    args = _parse_cmd_arguments()
    infile = args.infile

    tpe, dates, values = read_data(infile)
    assert tpe in ['water', 'electricity']
    if tpe == 'water':
        show_water_data(dates, values)
    else:  # electricity
        show_electricity_data(dates, values)
    plt.show()
